// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tile_feature.proto

package org.gbif.maps.io;

public final class TileFeature {
  private TileFeature() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }
  public interface TileFeaturesOrBuilder
      extends com.google.protobuf.MessageLiteOrBuilder {

    // repeated .org.gbif.maps.io.TileFeatures.Layer layers = 1;
    /**
     * <code>repeated .org.gbif.maps.io.TileFeatures.Layer layers = 1;</code>
     */
    java.util.List<org.gbif.maps.io.TileFeature.TileFeatures.Layer> 
        getLayersList();
    /**
     * <code>repeated .org.gbif.maps.io.TileFeatures.Layer layers = 1;</code>
     */
    org.gbif.maps.io.TileFeature.TileFeatures.Layer getLayers(int index);
    /**
     * <code>repeated .org.gbif.maps.io.TileFeatures.Layer layers = 1;</code>
     */
    int getLayersCount();
  }
  /**
   * Protobuf type {@code org.gbif.maps.io.TileFeatures}
   *
   * <pre>
   **
   * An optimized encoding for tile data.
   * </pre>
   */
  public static final class TileFeatures extends
      com.google.protobuf.GeneratedMessageLite
      implements TileFeaturesOrBuilder {
    // Use TileFeatures.newBuilder() to construct.
    private TileFeatures(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);

    }
    private TileFeatures(boolean noInit) {}

    private static final TileFeatures defaultInstance;
    public static TileFeatures getDefaultInstance() {
      return defaultInstance;
    }

    public TileFeatures getDefaultInstanceForType() {
      return defaultInstance;
    }

    private TileFeatures(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                layers_ = new java.util.ArrayList<org.gbif.maps.io.TileFeature.TileFeatures.Layer>();
                mutable_bitField0_ |= 0x00000001;
              }
              layers_.add(input.readMessage(org.gbif.maps.io.TileFeature.TileFeatures.Layer.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          layers_ = java.util.Collections.unmodifiableList(layers_);
        }
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<TileFeatures> PARSER =
        new com.google.protobuf.AbstractParser<TileFeatures>() {
      public TileFeatures parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new TileFeatures(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<TileFeatures> getParserForType() {
      return PARSER;
    }

    public interface LayerOrBuilder
        extends com.google.protobuf.MessageLiteOrBuilder {

      // required .org.gbif.maps.io.TileFeatures.Layer.BasisOfRecord basisOfRecord = 1;
      /**
       * <code>required .org.gbif.maps.io.TileFeatures.Layer.BasisOfRecord basisOfRecord = 1;</code>
       */
      boolean hasBasisOfRecord();
      /**
       * <code>required .org.gbif.maps.io.TileFeatures.Layer.BasisOfRecord basisOfRecord = 1;</code>
       */
      org.gbif.maps.io.TileFeature.TileFeatures.Layer.BasisOfRecord getBasisOfRecord();

      // repeated int32 x = 2 [packed = true];
      /**
       * <code>repeated int32 x = 2 [packed = true];</code>
       */
      java.util.List<java.lang.Integer> getXList();
      /**
       * <code>repeated int32 x = 2 [packed = true];</code>
       */
      int getXCount();
      /**
       * <code>repeated int32 x = 2 [packed = true];</code>
       */
      int getX(int index);

      // repeated int32 y = 3 [packed = true];
      /**
       * <code>repeated int32 y = 3 [packed = true];</code>
       */
      java.util.List<java.lang.Integer> getYList();
      /**
       * <code>repeated int32 y = 3 [packed = true];</code>
       */
      int getYCount();
      /**
       * <code>repeated int32 y = 3 [packed = true];</code>
       */
      int getY(int index);

      // repeated int32 year = 4 [packed = true];
      /**
       * <code>repeated int32 year = 4 [packed = true];</code>
       */
      java.util.List<java.lang.Integer> getYearList();
      /**
       * <code>repeated int32 year = 4 [packed = true];</code>
       */
      int getYearCount();
      /**
       * <code>repeated int32 year = 4 [packed = true];</code>
       */
      int getYear(int index);

      // repeated int32 count = 5 [packed = true];
      /**
       * <code>repeated int32 count = 5 [packed = true];</code>
       */
      java.util.List<java.lang.Integer> getCountList();
      /**
       * <code>repeated int32 count = 5 [packed = true];</code>
       */
      int getCountCount();
      /**
       * <code>repeated int32 count = 5 [packed = true];</code>
       */
      int getCount(int index);
    }
    /**
     * Protobuf type {@code org.gbif.maps.io.TileFeatures.Layer}
     *
     * <pre>
     * a layer contains the basis of record and year data
     * </pre>
     */
    public static final class Layer extends
        com.google.protobuf.GeneratedMessageLite
        implements LayerOrBuilder {
      // Use Layer.newBuilder() to construct.
      private Layer(com.google.protobuf.GeneratedMessageLite.Builder builder) {
        super(builder);

      }
      private Layer(boolean noInit) {}

      private static final Layer defaultInstance;
      public static Layer getDefaultInstance() {
        return defaultInstance;
      }

      public Layer getDefaultInstanceForType() {
        return defaultInstance;
      }

      private Layer(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 8: {
                int rawValue = input.readEnum();
                org.gbif.maps.io.TileFeature.TileFeatures.Layer.BasisOfRecord value = org.gbif.maps.io.TileFeature.TileFeatures.Layer.BasisOfRecord.valueOf(rawValue);
                if (value != null) {
                  bitField0_ |= 0x00000001;
                  basisOfRecord_ = value;
                }
                break;
              }
              case 16: {
                if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                  x_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000002;
                }
                x_.add(input.readInt32());
                break;
              }
              case 18: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00000002) == 0x00000002) && input.getBytesUntilLimit() > 0) {
                  x_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000002;
                }
                while (input.getBytesUntilLimit() > 0) {
                  x_.add(input.readInt32());
                }
                input.popLimit(limit);
                break;
              }
              case 24: {
                if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                  y_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000004;
                }
                y_.add(input.readInt32());
                break;
              }
              case 26: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00000004) == 0x00000004) && input.getBytesUntilLimit() > 0) {
                  y_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000004;
                }
                while (input.getBytesUntilLimit() > 0) {
                  y_.add(input.readInt32());
                }
                input.popLimit(limit);
                break;
              }
              case 32: {
                if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                  year_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000008;
                }
                year_.add(input.readInt32());
                break;
              }
              case 34: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00000008) == 0x00000008) && input.getBytesUntilLimit() > 0) {
                  year_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000008;
                }
                while (input.getBytesUntilLimit() > 0) {
                  year_.add(input.readInt32());
                }
                input.popLimit(limit);
                break;
              }
              case 40: {
                if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                  count_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000010;
                }
                count_.add(input.readInt32());
                break;
              }
              case 42: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00000010) == 0x00000010) && input.getBytesUntilLimit() > 0) {
                  count_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000010;
                }
                while (input.getBytesUntilLimit() > 0) {
                  count_.add(input.readInt32());
                }
                input.popLimit(limit);
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
            x_ = java.util.Collections.unmodifiableList(x_);
          }
          if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
            y_ = java.util.Collections.unmodifiableList(y_);
          }
          if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
            year_ = java.util.Collections.unmodifiableList(year_);
          }
          if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
            count_ = java.util.Collections.unmodifiableList(count_);
          }
          makeExtensionsImmutable();
        }
      }
      public static com.google.protobuf.Parser<Layer> PARSER =
          new com.google.protobuf.AbstractParser<Layer>() {
        public Layer parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new Layer(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<Layer> getParserForType() {
        return PARSER;
      }

      /**
       * Protobuf enum {@code org.gbif.maps.io.TileFeatures.Layer.BasisOfRecord}
       *
       * <pre>
       * this should hold the same values that the GBIF API support for consistency
       * </pre>
       */
      public enum BasisOfRecord
          implements com.google.protobuf.Internal.EnumLite {
        /**
         * <code>UNKNOWN = 0;</code>
         *
         * <pre>
         * Deprecated
         * </pre>
         */
        UNKNOWN(0, 0),
        /**
         * <code>PRESERVED_SPECIMEN = 1;</code>
         */
        PRESERVED_SPECIMEN(1, 1),
        /**
         * <code>FOSSIL_SPECIMEN = 2;</code>
         */
        FOSSIL_SPECIMEN(2, 2),
        /**
         * <code>LIVING_SPECIMEN = 3;</code>
         */
        LIVING_SPECIMEN(3, 3),
        /**
         * <code>OBSERVATION = 4;</code>
         */
        OBSERVATION(4, 4),
        /**
         * <code>HUMAN_OBSERVATION = 5;</code>
         */
        HUMAN_OBSERVATION(5, 5),
        /**
         * <code>MACHINE_OBSERVATION = 6;</code>
         */
        MACHINE_OBSERVATION(6, 6),
        /**
         * <code>MATERIAL_SAMPLE = 7;</code>
         */
        MATERIAL_SAMPLE(7, 7),
        /**
         * <code>LITERATURE = 8;</code>
         *
         * <pre>
         * Deprecated
         * </pre>
         */
        LITERATURE(8, 8),
        /**
         * <code>OCCURRENCE = 9;</code>
         */
        OCCURRENCE(9, 9),
        /**
         * <code>MATERIAL_CITATION = 10;</code>
         */
        MATERIAL_CITATION(10, 10),
        ;

        /**
         * <code>UNKNOWN = 0;</code>
         *
         * <pre>
         * Deprecated
         * </pre>
         */
        public static final int UNKNOWN_VALUE = 0;
        /**
         * <code>PRESERVED_SPECIMEN = 1;</code>
         */
        public static final int PRESERVED_SPECIMEN_VALUE = 1;
        /**
         * <code>FOSSIL_SPECIMEN = 2;</code>
         */
        public static final int FOSSIL_SPECIMEN_VALUE = 2;
        /**
         * <code>LIVING_SPECIMEN = 3;</code>
         */
        public static final int LIVING_SPECIMEN_VALUE = 3;
        /**
         * <code>OBSERVATION = 4;</code>
         */
        public static final int OBSERVATION_VALUE = 4;
        /**
         * <code>HUMAN_OBSERVATION = 5;</code>
         */
        public static final int HUMAN_OBSERVATION_VALUE = 5;
        /**
         * <code>MACHINE_OBSERVATION = 6;</code>
         */
        public static final int MACHINE_OBSERVATION_VALUE = 6;
        /**
         * <code>MATERIAL_SAMPLE = 7;</code>
         */
        public static final int MATERIAL_SAMPLE_VALUE = 7;
        /**
         * <code>LITERATURE = 8;</code>
         *
         * <pre>
         * Deprecated
         * </pre>
         */
        public static final int LITERATURE_VALUE = 8;
        /**
         * <code>OCCURRENCE = 9;</code>
         */
        public static final int OCCURRENCE_VALUE = 9;
        /**
         * <code>MATERIAL_CITATION = 10;</code>
         */
        public static final int MATERIAL_CITATION_VALUE = 10;


        public final int getNumber() { return value; }

        public static BasisOfRecord valueOf(int value) {
          switch (value) {
            case 0: return UNKNOWN;
            case 1: return PRESERVED_SPECIMEN;
            case 2: return FOSSIL_SPECIMEN;
            case 3: return LIVING_SPECIMEN;
            case 4: return OBSERVATION;
            case 5: return HUMAN_OBSERVATION;
            case 6: return MACHINE_OBSERVATION;
            case 7: return MATERIAL_SAMPLE;
            case 8: return LITERATURE;
            case 9: return OCCURRENCE;
            case 10: return MATERIAL_CITATION;
            default: return null;
          }
        }

        public static com.google.protobuf.Internal.EnumLiteMap<BasisOfRecord>
            internalGetValueMap() {
          return internalValueMap;
        }
        private static com.google.protobuf.Internal.EnumLiteMap<BasisOfRecord>
            internalValueMap =
              new com.google.protobuf.Internal.EnumLiteMap<BasisOfRecord>() {
                public BasisOfRecord findValueByNumber(int number) {
                  return BasisOfRecord.valueOf(number);
                }
              };

        private final int value;

        private BasisOfRecord(int index, int value) {
          this.value = value;
        }

        // @@protoc_insertion_point(enum_scope:org.gbif.maps.io.TileFeatures.Layer.BasisOfRecord)
      }

      private int bitField0_;
      // required .org.gbif.maps.io.TileFeatures.Layer.BasisOfRecord basisOfRecord = 1;
      public static final int BASISOFRECORD_FIELD_NUMBER = 1;
      private org.gbif.maps.io.TileFeature.TileFeatures.Layer.BasisOfRecord basisOfRecord_;
      /**
       * <code>required .org.gbif.maps.io.TileFeatures.Layer.BasisOfRecord basisOfRecord = 1;</code>
       */
      public boolean hasBasisOfRecord() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required .org.gbif.maps.io.TileFeatures.Layer.BasisOfRecord basisOfRecord = 1;</code>
       */
      public org.gbif.maps.io.TileFeature.TileFeatures.Layer.BasisOfRecord getBasisOfRecord() {
        return basisOfRecord_;
      }

      // repeated int32 x = 2 [packed = true];
      public static final int X_FIELD_NUMBER = 2;
      private java.util.List<java.lang.Integer> x_;
      /**
       * <code>repeated int32 x = 2 [packed = true];</code>
       */
      public java.util.List<java.lang.Integer>
          getXList() {
        return x_;
      }
      /**
       * <code>repeated int32 x = 2 [packed = true];</code>
       */
      public int getXCount() {
        return x_.size();
      }
      /**
       * <code>repeated int32 x = 2 [packed = true];</code>
       */
      public int getX(int index) {
        return x_.get(index);
      }
      private int xMemoizedSerializedSize = -1;

      // repeated int32 y = 3 [packed = true];
      public static final int Y_FIELD_NUMBER = 3;
      private java.util.List<java.lang.Integer> y_;
      /**
       * <code>repeated int32 y = 3 [packed = true];</code>
       */
      public java.util.List<java.lang.Integer>
          getYList() {
        return y_;
      }
      /**
       * <code>repeated int32 y = 3 [packed = true];</code>
       */
      public int getYCount() {
        return y_.size();
      }
      /**
       * <code>repeated int32 y = 3 [packed = true];</code>
       */
      public int getY(int index) {
        return y_.get(index);
      }
      private int yMemoizedSerializedSize = -1;

      // repeated int32 year = 4 [packed = true];
      public static final int YEAR_FIELD_NUMBER = 4;
      private java.util.List<java.lang.Integer> year_;
      /**
       * <code>repeated int32 year = 4 [packed = true];</code>
       */
      public java.util.List<java.lang.Integer>
          getYearList() {
        return year_;
      }
      /**
       * <code>repeated int32 year = 4 [packed = true];</code>
       */
      public int getYearCount() {
        return year_.size();
      }
      /**
       * <code>repeated int32 year = 4 [packed = true];</code>
       */
      public int getYear(int index) {
        return year_.get(index);
      }
      private int yearMemoizedSerializedSize = -1;

      // repeated int32 count = 5 [packed = true];
      public static final int COUNT_FIELD_NUMBER = 5;
      private java.util.List<java.lang.Integer> count_;
      /**
       * <code>repeated int32 count = 5 [packed = true];</code>
       */
      public java.util.List<java.lang.Integer>
          getCountList() {
        return count_;
      }
      /**
       * <code>repeated int32 count = 5 [packed = true];</code>
       */
      public int getCountCount() {
        return count_.size();
      }
      /**
       * <code>repeated int32 count = 5 [packed = true];</code>
       */
      public int getCount(int index) {
        return count_.get(index);
      }
      private int countMemoizedSerializedSize = -1;

      private void initFields() {
        basisOfRecord_ = org.gbif.maps.io.TileFeature.TileFeatures.Layer.BasisOfRecord.UNKNOWN;
        x_ = java.util.Collections.emptyList();
        y_ = java.util.Collections.emptyList();
        year_ = java.util.Collections.emptyList();
        count_ = java.util.Collections.emptyList();
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        if (!hasBasisOfRecord()) {
          memoizedIsInitialized = 0;
          return false;
        }
        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeEnum(1, basisOfRecord_.getNumber());
        }
        if (getXList().size() > 0) {
          output.writeRawVarint32(18);
          output.writeRawVarint32(xMemoizedSerializedSize);
        }
        for (int i = 0; i < x_.size(); i++) {
          output.writeInt32NoTag(x_.get(i));
        }
        if (getYList().size() > 0) {
          output.writeRawVarint32(26);
          output.writeRawVarint32(yMemoizedSerializedSize);
        }
        for (int i = 0; i < y_.size(); i++) {
          output.writeInt32NoTag(y_.get(i));
        }
        if (getYearList().size() > 0) {
          output.writeRawVarint32(34);
          output.writeRawVarint32(yearMemoizedSerializedSize);
        }
        for (int i = 0; i < year_.size(); i++) {
          output.writeInt32NoTag(year_.get(i));
        }
        if (getCountList().size() > 0) {
          output.writeRawVarint32(42);
          output.writeRawVarint32(countMemoizedSerializedSize);
        }
        for (int i = 0; i < count_.size(); i++) {
          output.writeInt32NoTag(count_.get(i));
        }
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeEnumSize(1, basisOfRecord_.getNumber());
        }
        {
          int dataSize = 0;
          for (int i = 0; i < x_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(x_.get(i));
          }
          size += dataSize;
          if (!getXList().isEmpty()) {
            size += 1;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          xMemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          for (int i = 0; i < y_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(y_.get(i));
          }
          size += dataSize;
          if (!getYList().isEmpty()) {
            size += 1;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          yMemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          for (int i = 0; i < year_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(year_.get(i));
          }
          size += dataSize;
          if (!getYearList().isEmpty()) {
            size += 1;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          yearMemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          for (int i = 0; i < count_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(count_.get(i));
          }
          size += dataSize;
          if (!getCountList().isEmpty()) {
            size += 1;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          countMemoizedSerializedSize = dataSize;
        }
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static org.gbif.maps.io.TileFeature.TileFeatures.Layer parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.gbif.maps.io.TileFeature.TileFeatures.Layer parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.gbif.maps.io.TileFeature.TileFeatures.Layer parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.gbif.maps.io.TileFeature.TileFeatures.Layer parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.gbif.maps.io.TileFeature.TileFeatures.Layer parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static org.gbif.maps.io.TileFeature.TileFeatures.Layer parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static org.gbif.maps.io.TileFeature.TileFeatures.Layer parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static org.gbif.maps.io.TileFeature.TileFeatures.Layer parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static org.gbif.maps.io.TileFeature.TileFeatures.Layer parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static org.gbif.maps.io.TileFeature.TileFeatures.Layer parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(org.gbif.maps.io.TileFeature.TileFeatures.Layer prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      /**
       * Protobuf type {@code org.gbif.maps.io.TileFeatures.Layer}
       *
       * <pre>
       * a layer contains the basis of record and year data
       * </pre>
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageLite.Builder<
            org.gbif.maps.io.TileFeature.TileFeatures.Layer, Builder>
          implements org.gbif.maps.io.TileFeature.TileFeatures.LayerOrBuilder {
        // Construct using org.gbif.maps.io.TileFeature.TileFeatures.Layer.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private void maybeForceBuilderInitialization() {
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          basisOfRecord_ = org.gbif.maps.io.TileFeature.TileFeatures.Layer.BasisOfRecord.UNKNOWN;
          bitField0_ = (bitField0_ & ~0x00000001);
          x_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          y_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          year_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
          count_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public org.gbif.maps.io.TileFeature.TileFeatures.Layer getDefaultInstanceForType() {
          return org.gbif.maps.io.TileFeature.TileFeatures.Layer.getDefaultInstance();
        }

        public org.gbif.maps.io.TileFeature.TileFeatures.Layer build() {
          org.gbif.maps.io.TileFeature.TileFeatures.Layer result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public org.gbif.maps.io.TileFeature.TileFeatures.Layer buildPartial() {
          org.gbif.maps.io.TileFeature.TileFeatures.Layer result = new org.gbif.maps.io.TileFeature.TileFeatures.Layer(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.basisOfRecord_ = basisOfRecord_;
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            x_ = java.util.Collections.unmodifiableList(x_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.x_ = x_;
          if (((bitField0_ & 0x00000004) == 0x00000004)) {
            y_ = java.util.Collections.unmodifiableList(y_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.y_ = y_;
          if (((bitField0_ & 0x00000008) == 0x00000008)) {
            year_ = java.util.Collections.unmodifiableList(year_);
            bitField0_ = (bitField0_ & ~0x00000008);
          }
          result.year_ = year_;
          if (((bitField0_ & 0x00000010) == 0x00000010)) {
            count_ = java.util.Collections.unmodifiableList(count_);
            bitField0_ = (bitField0_ & ~0x00000010);
          }
          result.count_ = count_;
          result.bitField0_ = to_bitField0_;
          return result;
        }

        public Builder mergeFrom(org.gbif.maps.io.TileFeature.TileFeatures.Layer other) {
          if (other == org.gbif.maps.io.TileFeature.TileFeatures.Layer.getDefaultInstance()) return this;
          if (other.hasBasisOfRecord()) {
            setBasisOfRecord(other.getBasisOfRecord());
          }
          if (!other.x_.isEmpty()) {
            if (x_.isEmpty()) {
              x_ = other.x_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureXIsMutable();
              x_.addAll(other.x_);
            }
            
          }
          if (!other.y_.isEmpty()) {
            if (y_.isEmpty()) {
              y_ = other.y_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureYIsMutable();
              y_.addAll(other.y_);
            }
            
          }
          if (!other.year_.isEmpty()) {
            if (year_.isEmpty()) {
              year_ = other.year_;
              bitField0_ = (bitField0_ & ~0x00000008);
            } else {
              ensureYearIsMutable();
              year_.addAll(other.year_);
            }
            
          }
          if (!other.count_.isEmpty()) {
            if (count_.isEmpty()) {
              count_ = other.count_;
              bitField0_ = (bitField0_ & ~0x00000010);
            } else {
              ensureCountIsMutable();
              count_.addAll(other.count_);
            }
            
          }
          return this;
        }

        public final boolean isInitialized() {
          if (!hasBasisOfRecord()) {
            
            return false;
          }
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          org.gbif.maps.io.TileFeature.TileFeatures.Layer parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (org.gbif.maps.io.TileFeature.TileFeatures.Layer) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // required .org.gbif.maps.io.TileFeatures.Layer.BasisOfRecord basisOfRecord = 1;
        private org.gbif.maps.io.TileFeature.TileFeatures.Layer.BasisOfRecord basisOfRecord_ = org.gbif.maps.io.TileFeature.TileFeatures.Layer.BasisOfRecord.UNKNOWN;
        /**
         * <code>required .org.gbif.maps.io.TileFeatures.Layer.BasisOfRecord basisOfRecord = 1;</code>
         */
        public boolean hasBasisOfRecord() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>required .org.gbif.maps.io.TileFeatures.Layer.BasisOfRecord basisOfRecord = 1;</code>
         */
        public org.gbif.maps.io.TileFeature.TileFeatures.Layer.BasisOfRecord getBasisOfRecord() {
          return basisOfRecord_;
        }
        /**
         * <code>required .org.gbif.maps.io.TileFeatures.Layer.BasisOfRecord basisOfRecord = 1;</code>
         */
        public Builder setBasisOfRecord(org.gbif.maps.io.TileFeature.TileFeatures.Layer.BasisOfRecord value) {
          if (value == null) {
            throw new NullPointerException();
          }
          bitField0_ |= 0x00000001;
          basisOfRecord_ = value;
          
          return this;
        }
        /**
         * <code>required .org.gbif.maps.io.TileFeatures.Layer.BasisOfRecord basisOfRecord = 1;</code>
         */
        public Builder clearBasisOfRecord() {
          bitField0_ = (bitField0_ & ~0x00000001);
          basisOfRecord_ = org.gbif.maps.io.TileFeature.TileFeatures.Layer.BasisOfRecord.UNKNOWN;
          
          return this;
        }

        // repeated int32 x = 2 [packed = true];
        private java.util.List<java.lang.Integer> x_ = java.util.Collections.emptyList();
        private void ensureXIsMutable() {
          if (!((bitField0_ & 0x00000002) == 0x00000002)) {
            x_ = new java.util.ArrayList<java.lang.Integer>(x_);
            bitField0_ |= 0x00000002;
           }
        }
        /**
         * <code>repeated int32 x = 2 [packed = true];</code>
         */
        public java.util.List<java.lang.Integer>
            getXList() {
          return java.util.Collections.unmodifiableList(x_);
        }
        /**
         * <code>repeated int32 x = 2 [packed = true];</code>
         */
        public int getXCount() {
          return x_.size();
        }
        /**
         * <code>repeated int32 x = 2 [packed = true];</code>
         */
        public int getX(int index) {
          return x_.get(index);
        }
        /**
         * <code>repeated int32 x = 2 [packed = true];</code>
         */
        public Builder setX(
            int index, int value) {
          ensureXIsMutable();
          x_.set(index, value);
          
          return this;
        }
        /**
         * <code>repeated int32 x = 2 [packed = true];</code>
         */
        public Builder addX(int value) {
          ensureXIsMutable();
          x_.add(value);
          
          return this;
        }
        /**
         * <code>repeated int32 x = 2 [packed = true];</code>
         */
        public Builder addAllX(
            java.lang.Iterable<? extends java.lang.Integer> values) {
          ensureXIsMutable();
          super.addAll(values, x_);
          
          return this;
        }
        /**
         * <code>repeated int32 x = 2 [packed = true];</code>
         */
        public Builder clearX() {
          x_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          
          return this;
        }

        // repeated int32 y = 3 [packed = true];
        private java.util.List<java.lang.Integer> y_ = java.util.Collections.emptyList();
        private void ensureYIsMutable() {
          if (!((bitField0_ & 0x00000004) == 0x00000004)) {
            y_ = new java.util.ArrayList<java.lang.Integer>(y_);
            bitField0_ |= 0x00000004;
           }
        }
        /**
         * <code>repeated int32 y = 3 [packed = true];</code>
         */
        public java.util.List<java.lang.Integer>
            getYList() {
          return java.util.Collections.unmodifiableList(y_);
        }
        /**
         * <code>repeated int32 y = 3 [packed = true];</code>
         */
        public int getYCount() {
          return y_.size();
        }
        /**
         * <code>repeated int32 y = 3 [packed = true];</code>
         */
        public int getY(int index) {
          return y_.get(index);
        }
        /**
         * <code>repeated int32 y = 3 [packed = true];</code>
         */
        public Builder setY(
            int index, int value) {
          ensureYIsMutable();
          y_.set(index, value);
          
          return this;
        }
        /**
         * <code>repeated int32 y = 3 [packed = true];</code>
         */
        public Builder addY(int value) {
          ensureYIsMutable();
          y_.add(value);
          
          return this;
        }
        /**
         * <code>repeated int32 y = 3 [packed = true];</code>
         */
        public Builder addAllY(
            java.lang.Iterable<? extends java.lang.Integer> values) {
          ensureYIsMutable();
          super.addAll(values, y_);
          
          return this;
        }
        /**
         * <code>repeated int32 y = 3 [packed = true];</code>
         */
        public Builder clearY() {
          y_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          
          return this;
        }

        // repeated int32 year = 4 [packed = true];
        private java.util.List<java.lang.Integer> year_ = java.util.Collections.emptyList();
        private void ensureYearIsMutable() {
          if (!((bitField0_ & 0x00000008) == 0x00000008)) {
            year_ = new java.util.ArrayList<java.lang.Integer>(year_);
            bitField0_ |= 0x00000008;
           }
        }
        /**
         * <code>repeated int32 year = 4 [packed = true];</code>
         */
        public java.util.List<java.lang.Integer>
            getYearList() {
          return java.util.Collections.unmodifiableList(year_);
        }
        /**
         * <code>repeated int32 year = 4 [packed = true];</code>
         */
        public int getYearCount() {
          return year_.size();
        }
        /**
         * <code>repeated int32 year = 4 [packed = true];</code>
         */
        public int getYear(int index) {
          return year_.get(index);
        }
        /**
         * <code>repeated int32 year = 4 [packed = true];</code>
         */
        public Builder setYear(
            int index, int value) {
          ensureYearIsMutable();
          year_.set(index, value);
          
          return this;
        }
        /**
         * <code>repeated int32 year = 4 [packed = true];</code>
         */
        public Builder addYear(int value) {
          ensureYearIsMutable();
          year_.add(value);
          
          return this;
        }
        /**
         * <code>repeated int32 year = 4 [packed = true];</code>
         */
        public Builder addAllYear(
            java.lang.Iterable<? extends java.lang.Integer> values) {
          ensureYearIsMutable();
          super.addAll(values, year_);
          
          return this;
        }
        /**
         * <code>repeated int32 year = 4 [packed = true];</code>
         */
        public Builder clearYear() {
          year_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
          
          return this;
        }

        // repeated int32 count = 5 [packed = true];
        private java.util.List<java.lang.Integer> count_ = java.util.Collections.emptyList();
        private void ensureCountIsMutable() {
          if (!((bitField0_ & 0x00000010) == 0x00000010)) {
            count_ = new java.util.ArrayList<java.lang.Integer>(count_);
            bitField0_ |= 0x00000010;
           }
        }
        /**
         * <code>repeated int32 count = 5 [packed = true];</code>
         */
        public java.util.List<java.lang.Integer>
            getCountList() {
          return java.util.Collections.unmodifiableList(count_);
        }
        /**
         * <code>repeated int32 count = 5 [packed = true];</code>
         */
        public int getCountCount() {
          return count_.size();
        }
        /**
         * <code>repeated int32 count = 5 [packed = true];</code>
         */
        public int getCount(int index) {
          return count_.get(index);
        }
        /**
         * <code>repeated int32 count = 5 [packed = true];</code>
         */
        public Builder setCount(
            int index, int value) {
          ensureCountIsMutable();
          count_.set(index, value);
          
          return this;
        }
        /**
         * <code>repeated int32 count = 5 [packed = true];</code>
         */
        public Builder addCount(int value) {
          ensureCountIsMutable();
          count_.add(value);
          
          return this;
        }
        /**
         * <code>repeated int32 count = 5 [packed = true];</code>
         */
        public Builder addAllCount(
            java.lang.Iterable<? extends java.lang.Integer> values) {
          ensureCountIsMutable();
          super.addAll(values, count_);
          
          return this;
        }
        /**
         * <code>repeated int32 count = 5 [packed = true];</code>
         */
        public Builder clearCount() {
          count_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
          
          return this;
        }

        // @@protoc_insertion_point(builder_scope:org.gbif.maps.io.TileFeatures.Layer)
      }

      static {
        defaultInstance = new Layer(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:org.gbif.maps.io.TileFeatures.Layer)
    }

    // repeated .org.gbif.maps.io.TileFeatures.Layer layers = 1;
    public static final int LAYERS_FIELD_NUMBER = 1;
    private java.util.List<org.gbif.maps.io.TileFeature.TileFeatures.Layer> layers_;
    /**
     * <code>repeated .org.gbif.maps.io.TileFeatures.Layer layers = 1;</code>
     */
    public java.util.List<org.gbif.maps.io.TileFeature.TileFeatures.Layer> getLayersList() {
      return layers_;
    }
    /**
     * <code>repeated .org.gbif.maps.io.TileFeatures.Layer layers = 1;</code>
     */
    public java.util.List<? extends org.gbif.maps.io.TileFeature.TileFeatures.LayerOrBuilder> 
        getLayersOrBuilderList() {
      return layers_;
    }
    /**
     * <code>repeated .org.gbif.maps.io.TileFeatures.Layer layers = 1;</code>
     */
    public int getLayersCount() {
      return layers_.size();
    }
    /**
     * <code>repeated .org.gbif.maps.io.TileFeatures.Layer layers = 1;</code>
     */
    public org.gbif.maps.io.TileFeature.TileFeatures.Layer getLayers(int index) {
      return layers_.get(index);
    }
    /**
     * <code>repeated .org.gbif.maps.io.TileFeatures.Layer layers = 1;</code>
     */
    public org.gbif.maps.io.TileFeature.TileFeatures.LayerOrBuilder getLayersOrBuilder(
        int index) {
      return layers_.get(index);
    }

    private void initFields() {
      layers_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      for (int i = 0; i < getLayersCount(); i++) {
        if (!getLayers(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < layers_.size(); i++) {
        output.writeMessage(1, layers_.get(i));
      }
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < layers_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, layers_.get(i));
      }
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.gbif.maps.io.TileFeature.TileFeatures parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.gbif.maps.io.TileFeature.TileFeatures parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.gbif.maps.io.TileFeature.TileFeatures parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.gbif.maps.io.TileFeature.TileFeatures parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.gbif.maps.io.TileFeature.TileFeatures parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.gbif.maps.io.TileFeature.TileFeatures parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.gbif.maps.io.TileFeature.TileFeatures parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.gbif.maps.io.TileFeature.TileFeatures parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.gbif.maps.io.TileFeature.TileFeatures parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.gbif.maps.io.TileFeature.TileFeatures parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.gbif.maps.io.TileFeature.TileFeatures prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code org.gbif.maps.io.TileFeatures}
     *
     * <pre>
     **
     * An optimized encoding for tile data.
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.gbif.maps.io.TileFeature.TileFeatures, Builder>
        implements org.gbif.maps.io.TileFeature.TileFeaturesOrBuilder {
      // Construct using org.gbif.maps.io.TileFeature.TileFeatures.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        layers_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.gbif.maps.io.TileFeature.TileFeatures getDefaultInstanceForType() {
        return org.gbif.maps.io.TileFeature.TileFeatures.getDefaultInstance();
      }

      public org.gbif.maps.io.TileFeature.TileFeatures build() {
        org.gbif.maps.io.TileFeature.TileFeatures result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.gbif.maps.io.TileFeature.TileFeatures buildPartial() {
        org.gbif.maps.io.TileFeature.TileFeatures result = new org.gbif.maps.io.TileFeature.TileFeatures(this);
        int from_bitField0_ = bitField0_;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          layers_ = java.util.Collections.unmodifiableList(layers_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.layers_ = layers_;
        return result;
      }

      public Builder mergeFrom(org.gbif.maps.io.TileFeature.TileFeatures other) {
        if (other == org.gbif.maps.io.TileFeature.TileFeatures.getDefaultInstance()) return this;
        if (!other.layers_.isEmpty()) {
          if (layers_.isEmpty()) {
            layers_ = other.layers_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureLayersIsMutable();
            layers_.addAll(other.layers_);
          }
          
        }
        return this;
      }

      public final boolean isInitialized() {
        for (int i = 0; i < getLayersCount(); i++) {
          if (!getLayers(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.gbif.maps.io.TileFeature.TileFeatures parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.gbif.maps.io.TileFeature.TileFeatures) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // repeated .org.gbif.maps.io.TileFeatures.Layer layers = 1;
      private java.util.List<org.gbif.maps.io.TileFeature.TileFeatures.Layer> layers_ =
        java.util.Collections.emptyList();
      private void ensureLayersIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          layers_ = new java.util.ArrayList<org.gbif.maps.io.TileFeature.TileFeatures.Layer>(layers_);
          bitField0_ |= 0x00000001;
         }
      }

      /**
       * <code>repeated .org.gbif.maps.io.TileFeatures.Layer layers = 1;</code>
       */
      public java.util.List<org.gbif.maps.io.TileFeature.TileFeatures.Layer> getLayersList() {
        return java.util.Collections.unmodifiableList(layers_);
      }
      /**
       * <code>repeated .org.gbif.maps.io.TileFeatures.Layer layers = 1;</code>
       */
      public int getLayersCount() {
        return layers_.size();
      }
      /**
       * <code>repeated .org.gbif.maps.io.TileFeatures.Layer layers = 1;</code>
       */
      public org.gbif.maps.io.TileFeature.TileFeatures.Layer getLayers(int index) {
        return layers_.get(index);
      }
      /**
       * <code>repeated .org.gbif.maps.io.TileFeatures.Layer layers = 1;</code>
       */
      public Builder setLayers(
          int index, org.gbif.maps.io.TileFeature.TileFeatures.Layer value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureLayersIsMutable();
        layers_.set(index, value);

        return this;
      }
      /**
       * <code>repeated .org.gbif.maps.io.TileFeatures.Layer layers = 1;</code>
       */
      public Builder setLayers(
          int index, org.gbif.maps.io.TileFeature.TileFeatures.Layer.Builder builderForValue) {
        ensureLayersIsMutable();
        layers_.set(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .org.gbif.maps.io.TileFeatures.Layer layers = 1;</code>
       */
      public Builder addLayers(org.gbif.maps.io.TileFeature.TileFeatures.Layer value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureLayersIsMutable();
        layers_.add(value);

        return this;
      }
      /**
       * <code>repeated .org.gbif.maps.io.TileFeatures.Layer layers = 1;</code>
       */
      public Builder addLayers(
          int index, org.gbif.maps.io.TileFeature.TileFeatures.Layer value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureLayersIsMutable();
        layers_.add(index, value);

        return this;
      }
      /**
       * <code>repeated .org.gbif.maps.io.TileFeatures.Layer layers = 1;</code>
       */
      public Builder addLayers(
          org.gbif.maps.io.TileFeature.TileFeatures.Layer.Builder builderForValue) {
        ensureLayersIsMutable();
        layers_.add(builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .org.gbif.maps.io.TileFeatures.Layer layers = 1;</code>
       */
      public Builder addLayers(
          int index, org.gbif.maps.io.TileFeature.TileFeatures.Layer.Builder builderForValue) {
        ensureLayersIsMutable();
        layers_.add(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .org.gbif.maps.io.TileFeatures.Layer layers = 1;</code>
       */
      public Builder addAllLayers(
          java.lang.Iterable<? extends org.gbif.maps.io.TileFeature.TileFeatures.Layer> values) {
        ensureLayersIsMutable();
        super.addAll(values, layers_);

        return this;
      }
      /**
       * <code>repeated .org.gbif.maps.io.TileFeatures.Layer layers = 1;</code>
       */
      public Builder clearLayers() {
        layers_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);

        return this;
      }
      /**
       * <code>repeated .org.gbif.maps.io.TileFeatures.Layer layers = 1;</code>
       */
      public Builder removeLayers(int index) {
        ensureLayersIsMutable();
        layers_.remove(index);

        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.gbif.maps.io.TileFeatures)
    }

    static {
      defaultInstance = new TileFeatures(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.gbif.maps.io.TileFeatures)
  }


  static {
  }

  // @@protoc_insertion_point(outer_class_scope)
}
